/*
 * Copyright (c) 2023 The ZMK Contributors
 * SPDX-License-Identifier: MIT
 *
 * Aurora Sofle V2 Rev 1.1. Board with two rotary encoders.
 * Keymap by Sjur Barndon. 
 * 
 */

//TODO: rotary knob sensistivity. I want on 'click' per activation in stead of two.
//TODO: screen brightness: C_BRI_UP / DN


#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>


#define ZMK_POINTING_DEFAULT_MOVE_VAL 10000  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 140    // default: 10


#include <dt-bindings/zmk/pointing.h>


/ {
    behaviors {
        dbbs: double_tap_backspace {          // This should backspace when pressed once, and ctrl backspace when double tapped 
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp BSPC>, <&kp LC(BSPC)>;
        };
        //test for shift del funk on top of dbbs
        dbbsdel: double_back_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&dbbs>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        

        // Sensor rotation:
        a_scroll_y: sensor_arrow_scroll_y {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp LEFT_ARROW>, <&kp RIGHT_ARROW>;
        };
        a_scroll_x: sensor_arrow_scroll_x {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp UP_ARROW>, <&kp DOWN_ARROW>;
        };
        mouse_move_x: mouse_move_x {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&mmv MOVE_DOWN>, <&mmv MOVE_UP>;
            tap-ms = <20>; 
        };
        mouse_move_y: mouse_move_y {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&mmv MOVE_LEFT>, <&mmv MOVE_RIGHT>;
            tap-ms = <20>; 
        };
        mouse_scroll_x: mouse_scroll_x {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;
            tap-ms = <20>; 
        };
        mouse_scroll_y: mouse_scroll_y {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_LEFT>, <&msc SCRL_RIGHT>;
            tap-ms = <20>; 
        };

        //ctrl z and ctrl y on rotation
        history_scroll: history_scroll {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp LC(Z)>, <&kp LC(Y)>;
            tap-ms = <20>; 
        };

    
        //mod morph for norwegian layout
        dotcolon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        commasemi: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMICOLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        starapo: star_apostrophe {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp STAR>, <&kp APOSTROPHE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        minuscore: minus_underscore {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp UNDERSCORE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        
    };
    // conditional_layers {
    //     compatible = "zmk,conditional-layers";
    //     tri_layer {
    //         if-layers = <1 2>;
    //         then-layer = <3>;
    //     };
    // };
    keymap {
        compatible = "zmk,keymap";

// ------------------------------------------------------------------------------------------------------------
// |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |  DEL  |
// |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   ?   |
// | SHIFT |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |  *'   | SHIFT |
// | CTRL  |  Z  |  X  |  C   |  V   |  B   |  "??"  |  | "??"  |  N   |  M    |  ,;   | .:   |  -_   |  CTRL |
//               | GUI | ALT  | L2   |  L1  |  BSPC  |  | SPACE |RET/L2|  L2   |  ALT  |  GUI |

        base_layer { //Layer0
            bindings = <

&kp ESC         &kp N1 &kp N2    &kp N3   &kp N4   &kp N5                          &kp N6      &kp N7   &kp N8     &kp N9    &kp N0     &kp DEL
&kp TAB         &kp Q  &kp W     &kp E    &kp R    &kp T                           &kp Y       &kp U    &kp I      &kp O     &kp P      &kp QMARK
&mt LSHFT CAPS  &kp A  &kp S     &kp D    &kp F    &kp G                           &kp H       &kp J    &kp K      &kp L     &starapo   &kp RSHFT
&kp LCTRL       &kp Z  &kp X     &kp C    &kp V    &kp B     &kp C_MUTE &kp K_PP   &kp N       &kp M    &commasemi &dotcolon &minuscore &kp LCTRL
                       &kp LGUI  &kp LALT &mo 2    &kp SPACE &mo 1      &lt 1 RET  &dbbsdel    &mo 2    &kp RALT   &to 3
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &mouse_scroll_x>;
        };

        symbols_layer { //Layer1
            bindings = <

&to 0      &kp F1       &kp F2  &kp F3      &kp F4       &kp F5                       &kp F6    &kp F7    &kp F8    &kp F9    &kp F10   &kp F11   
&kp PIPE   &kp EXCL     &kp DQT &kp HASH    &kp DOLLAR   &kp PRCNT                    &kp AMPS  &kp CARET &kp QMARK &kp SQT   &none     &kp F12
&none      &kp TILDE    &kp LT  &kp LBRC    &kp LPAR     &kp LBKT                     &kp RBKT  &kp RPAR  &kp RBRC  &kp GT    &kp EQUAL &kp INS
&none      &none        &kp AT  &none       &kp MINUS    &kp BSLH  &trans   &trans    &kp FSLH  &kp PLUS  &kp STAR  &none     &none     &kp PSCRN
                        &trans  &trans      &trans       &trans    &trans   &trans    &trans    &trans    &trans    &trans
            >;

            sensor-bindings = <&history_scroll &mouse_scroll_x>; //&a_scroll_x &a_scroll_y>
        };

        navigation_layer { //Layer2
            bindings = <

&to 0  &none &none    &none    &none     &none                         &none      &none     &mkp MCLK &none         &none           &none
&none  &none &none    &kp UP   &none     &none                         &none      &mkp LCLK &kp UP    &mkp RCLK     &none           &none
&none  &none &kp LEFT &kp DOWN &kp RIGHT &none                         &none      &kp LEFT  &kp DOWN  &kp RIGHT     &none           &none
&none  &none &none    &none    &none     &none  &mkp LCLK  &mkp RCLK   &none      &none     &none     &none         &none           &none
             &trans   &trans   &trans    &trans &trans     &trans      &trans     &trans    &trans    &trans
             >;

            sensor-bindings = <&mouse_move_x &mouse_move_y>;
        };

        numpad_layer { //Layer3 //TODO return to L0 after BT SEL
            bindings = <

&to 0    &none        &none         &none        &none         &none                       &kp KP_NLCK &kp DEL    &kp FSLH   &kp STAR    &kp MINUS   &to 0 
&none    &none        &none         &none        &bt BT_CLR    &none                       &kp PG_UP   &kp KP_N7  &kp KP_N8  &kp KP_N9   &kp PLUS    &none
&none    &bt BT_SEL 3 &bt BT_SEL 2  &bt BT_SEL 1 &bt BT_SEL 0  &none                       &kp PG_DN   &kp KP_N4  &kp KP_N5  &kp KP_N6   &kp RET     &none
&none    &none        &none         &none        &none         &none     &none   &none     &none       &kp KP_N1  &kp KP_N2  &kp KP_N3   &none       &none
                      &trans        &trans       &trans        &trans    &trans  &trans    &none       &kp KP_N0  &none      &to 0
            >;

            sensor-bindings = <&mouse_scroll_x &mouse_scroll_y>;
        };

//         dvorak_layer { //LayerX
//             bindings = <
//
// &trans    &trans &trans &trans  &trans  &trans                       &trans      &trans    &trans    &trans   &trans    &to 0
// &trans    &kp Å  &kp ,  &kp .   &kp P   &kp Y                        &kp F       &kp G     &kp C     &kp R    &kp L     &trans
// &trans    &kp A  &kp O  &kp I   &kp U   &kp I                        &kp D       &kp H     &kp T     &kp N    &kp S     &trans
// &trans    &kp Ø  &kp Æ  &kp Q   &kp J   &kp K     &trans   &trans    &kp X       &kp B     &kp M     &kp W    &kp V     &kp Z
//                  &trans &trans  &trans  &trans    &trans   &trans    &trans      &trans    &trans    &trans
//             >;
//
//              sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp PG_UP PG_DN>;
//         };


//         template_layer { //LayerX
//             bindings = <
//
// &to 0     &trans &trans &trans  &trans  &trans                       &trans      &trans    &trans    &trans   &trans    &trans
// &trans    &trans &trans &trans  &trans  &trans                       &trans      &trans    &trans    &trans   &trans    &trans
// &trans    &trans &trans &trans  &trans  &trans                       &trans      &trans    &trans    &trans   &trans    &trans
// &trans    &trans &trans &trans  &trans  &trans    &trans   &trans    &trans      &trans    &trans    &trans   &trans    &trans
//                  &trans &trans  &trans  &trans    &trans   &trans    &trans      &trans    &trans    &trans
//             >;
//
//              sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp PG_UP PG_DN>;
//         };
    };
};
