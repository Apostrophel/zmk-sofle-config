/*
 * Copyright (c) 2023 The ZMK Contributors
 * SPDX-License-Identifier: MIT
 *
 * Aurora Sofle V2 Rev 1.1. Board with two rotary encoders.
 * Home row mods, dedicated shift key on standard keyboard positions. Thumb keys with layers hold-tap for space and backspace.
 * Right-shifted wasd gaming layer with an additional raised gaming layer
 * Keymap by Sjur Barndon. 
 * 
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>


#define BASE 0
#define SYM 1
#define NAV 2
#define FUN 3

// Mouse and rotary redefinition:
#define ZMK_POINTING_DEFAULT_MOVE_VAL 5000   // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 140    // default: 10

    &mmv {
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        time-to-max-speed-ms = <90>;
        acceleration-exponent = <1>;
    };
    &sensors {
        triggers-per-rotation = <72>;
    };


#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/mouse.h>

/ {
    behaviors {
        dbbs: double_tap_backspace {               // This should backspace when pressed once, and ctrl backspace (backspace word) when double tapped 
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp BSPC>, <&kp LC(BSPC)>;
        };

        dbbsdel: double_back_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&dbbs>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // Macros (bluetooth)
        bt0: btmacro0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &bt BT_SEL 0>,<&macro_press &to 0>;
        };        
        bt1: btmacro1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &bt BT_SEL 1>,<&macro_press &to 0>;
        };        
        bt2: btmacro2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &bt BT_SEL 2>,<&macro_press &to 0>;
        };
        bt3: btmacro3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &bt BT_SEL 3>,<&macro_press &to 0>;
        };

        // Sensor rotation:
        a_scroll_y: sensor_arrow_scroll_y {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp LEFT_ARROW>, <&kp RIGHT_ARROW>;
            tap-ms = <20>;  
        };
        a_scroll_x: sensor_arrow_scroll_x {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp UP_ARROW>, <&kp DOWN_ARROW>;
            tap-ms = <20>;              
        };
        mouse_move_x: mouse_move_x {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&mmv MOVE_UP>, <&mmv MOVE_DOWN>;
            tap-ms = <20>;  
        };
        mouse_move_y: mouse_move_y {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&mmv MOVE_LEFT>, <&mmv MOVE_RIGHT>;
            tap-ms = <20>;  
        };
        mouse_scroll_x: mouse_scroll_x {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;
            tap-ms = <20>;  
        };
        mouse_scroll_y: mouse_scroll_y {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_LEFT>, <&msc SCRL_RIGHT>;
            tap-ms = <20>; 
        };

        //ctrl z and ctrl y on rotation
        history_scroll: history_scroll {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp LC(Z)>, <&kp LC(Y)>;
            tap-ms = <20>; 
        };

        //mod morph for norwegian layout
        dotcolon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        commasemi: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMICOLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        starapo: star_apostrophe {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp STAR>, <&kp APOSTROPHE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        minuscore: minus_underscore {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp UNDERSCORE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        colonsemi: colon_semi_shiftmod {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp SEMICOLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        /* hm_cosem: gui_colon_semi_shift { */
        /*     compatible = "zmk,behavior-hold-tap"; */
        /*     #binding-cells = <2>; */
        /*     flavor = "hold-preferred"; */
        /*     tapping-term-ms = <200>; */
        /*     bindings = <&mo>, <&colonsemi>; */
        /* }; */
        //Super space key nested into spacemod below: tap - space, hold - momentary layer, shift+tap - backspace, gui+alt+tap - delete
        spacectrl: delete_ctrl_shift_space {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DEL>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
        };

        spaceshift: shift_space_is_backspace { 
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&spacectrl>;          
            mods = <(MOD_LSFT|MOD_RSFT)>;       
        };


        backspace_shift: shift_backspace_is_ctrl_backspace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp LC(BACKSPACE)>;          
            mods = <(MOD_LSFT|MOD_RSFT)>;       
        };

        backspacemod: sym_hold_shift_backspace {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&backspace_shift>;
        };
        
        spacemod: spaceshift_and_layer_hold {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&spaceshift>;
        };
        capsword_hold_tap: hold_tap_capsword_key {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <400>;
            bindings = <&caps_word>, <&kp>;
        };
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        // mod morph for brackets:
        mod_morph_lpar_rpar: mod-morph-lpar {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&kp RPAR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mod_morph_rpar_lpar: mod-morph-rpar {
            compatible = "zmk,behavior-mod-morph"; 
            #binding-cells = <0>;
            bindings = <&kp RPAR>, <&kp LPAR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        // [ and ]
        mod_morph_lbkt_rbkt: mod-morph-lbkt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LBKT>, <&kp RBKT>;  
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mod_morph_rbkt_lbkt: mod-morph-rbkt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RBKT>, <&kp LBKT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // { and }
        mod_morph_lcbr_rcbr: mod-morph-lcbr {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LBRC>, <&kp RBRC>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mod_morph_rcbr_lcbr: mod-morph-rcbr {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RBRC>, <&kp LBRC>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // < and >
        mod_morph_lt_gt: mod-morph-lt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LT>, <&kp GT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mod_morph_gt_lt: mod-morph-gt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp GT>, <&kp LT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        
    };

    combos {
        compatible = "zmk,combos";
        combo_quote {
            timeout-ms = <50>;
            layers = <0 1>;
            key-positions = <27 28>;          //df
            bindings = <&kp DOUBLE_QUOTES>;
        };
        combo_apostrophe {
            timeout-ms = <50>;
            layers = <0 1>;
            key-positions = <31 32>;          //jk
            bindings = <&kp APOSTROPHE>;
        };
        combo_parantesis_open {
            timeout-ms = <50>;
            layers = <0 1>;
            key-positions = <26 28>;
            bindings = <&mod_morph_lpar_rpar>;
        };
        combo_parantesis_close {
            timeout-ms = <50>;
            layers = <0 1>;
            key-positions = <31 33>;
            bindings = <&mod_morph_rpar_lpar>;
        };
        combo_forward_slash {
            timeout-ms = <50>;
            layers = <0 1>;
            key-positions = <25 28>; // af
            bindings = <&kp FSLH>;
        };
        combo_backwards_slash {
            timeout-ms = <50>;
            layers = <0 1>;
            key-positions = <31 34>; // j:
            bindings = <&kp BSLH>;
        };
        combo_curlybracket_open {
            timeout-ms = <50>;
            layers = <0 1>;
            key-positions = <38 40>; // xv
            bindings = <&mod_morph_lcbr_rcbr>;
        };
        combo_curlybracket_close {
            timeout-ms = <50>;
            layers = <0 1>;
            key-positions = <45 47>; // m.
            bindings = <&mod_morph_rcbr_lcbr>;
        };
        combo_bracket_open {
            timeout-ms = <50>;
            layers = <0 1>;
            key-positions = <14 16>; // wr
            bindings = <&mod_morph_lbkt_rbkt>;
        };
        combo_bracket_close {
            timeout-ms = <50>;
            layers = <0 1>;
            key-positions = <19 21>; // uo
            bindings = <&mod_morph_rbkt_lbkt>;
        };

        combo_alligator_open {
            timeout-ms = <50>;
            layers = <0 1>;
            key-positions = <2 4>; // 24
            bindings = <&mod_morph_lt_gt>;
        };
        combo_alligator_close {
            timeout-ms = <50>;
            layers = <0 1>;
            key-positions = <7 9>; // 79
            bindings = <&mod_morph_gt_lt>;
        };
        combo_return_to_base_layer { // Global scope combo on the left half to return to base layer
            timeout-ms = <50>;
            key-positions = <0 41>; //ESC + B
            bindings = <&to BASE>;
        };

    };

    macros {
        comment: vs_code_comment{
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LEFT_CONTROL>
                , <&macro_tap &kp K &kp C>
                , <&macro_release &kp LEFT_CONTROL>
                ;
        };
        uncomment: vs_code_uncomment{
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LEFT_CONTROL>
                , <&macro_tap &kp K &kp U>
                , <&macro_release &kp LEFT_CONTROL>
                ;
        };
    };
    
    
    keymap {
        compatible = "zmk,keymap";

        base_layer { //Layer 0  - BASE
            bindings = <

&none       &none         &none       &none        &none       &none                                             &none                   &none       &none         &none         &none               &none 
&none       &kp Q         &kp W       &kp E        &kp R       &kp T                                             &kp Y                   &kp U       &kp I         &kp O         &kp P               &none 
&none       &hm LGUI A    &hm LALT S  &hm LSHFT D  &hm LCTRL F &kp G                                             &kp H                   &hm RCTRL J &hm RSHIFT K  &hm RALT L    &colonsemi          &none
&none       &kp Z         &kp X       &kp C        &kp V       &kp B               &none          &none          &kp N                   &kp M       &commasemi    &dotcolon     &minuscore          &none
                          &none       &none        &kp ESC     &spacemod SYM SYM   &lt NAV TAB    &lt NAV ENTER  &backspacemod SYM SYM   &kp DEL     &none         &none  
            >;                                                                               
            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &mouse_scroll_x>;
        };                  

        symbols_layer { //Layer 1 - SYM
            bindings = <

&none  &none          &none          &none            &none           &none                                 &none        &none            &none             &none           &none            &none 
&none  &kp TILDE      &kp AT         &kp PIPE         &kp CARET       &kp LT                                &kp GT       &kp KP_N7        &kp KP_N8         &kp KP_N9       &kp GRAVE        &none
&none  &hm LGUI HASH  &hm LALT PRCNT &hm LSHFT MINUS  &hm LCTRL PLUS  &kp EQUAL                             &kp KP_N0    &hm RCTRL KP_N4  &hm RSHIFT KP_N5  &hm RALT KP_N6  &hm RGUI DOLLAR  &none
&none  &caps_word     &kp AMPS       &kp QMARK        &kp EXCL        &kp STAR           &none    &none     &kp COMMA    &kp KP_N1        &kp KP_N2         &kp KP_N3       &kp DOT           &none
                      &none          &none            &lt FUN ESC     &spacemod FUN FUN  &kp TAB  &kp RET   &kp BSPC     &lt FUN DEL      &none             &none
            >;
            sensor-bindings = <&history_scroll &history_scroll>; 
        };      

        navigation_layer { //Layer 2 - NAV
            bindings = <

&none      &none        &none            &none        &none             &none                            &none      &none     &none             &none       &none   &none 
&none      &none        &none            &none        &none             &none                            &kp HOME   &kp PG_DN &kp PG_UP         &kp END     &none   &none
&none      &kp LGUI     &kp LALT         &kp LSHFT    &kp LCTRL         &none                            &kp LEFT   &kp DOWN  &kp UP            &kp RIGHT   &none   &none
&none      &none        &none            &none        &none             &kp PSCRN  &mkp RCLK  &mkp LCLK  &kp PSCRN  &none     &none             &none       &none   &none
                        &none            &none        &to BASE          &kp SPACE  &kp TAB    &kp RET    &kp BSPC   &none     &none             &none
             >;
            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &mouse_scroll_x>;
        };

        function_layer { //Layer 3 - FUN
            bindings = <

&none       &none     &none            &none           &none           &none                          &none       &none      &none      &none       &none    &none 
&none       &none     &none            &none           &none           &none                          &none       &kp F7     &kp F8     &kp F9      &kp F10  &none
&none       &kp LGUI  &kp LALT         &kp LSHFT       &kp LCTRL       &none                          &none       &kp F4     &kp F5     &kp F6      &kp F11  &none
&none       &none     &none            &none           &none           &none      &none     &none     &none       &kp F1     &kp F2     &kp F3      &kp F12  &none
                      &none            &none           &to BASE        &kp SPACE  &kp TAB   &kp RET   &kp BSPC    &none      &none      &none
            >;
            sensor-bindings = <&inc_dec_kp C_BRI_UP C_BRI_DN &mouse_scroll_x>; 
        };
    };
};
