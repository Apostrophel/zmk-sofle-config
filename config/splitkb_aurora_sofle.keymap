/*
 * Copyright (c) 2023 The ZMK Contributors
 * SPDX-License-Identifier: MIT
 *
 * Aurora Sofle V2 Rev 1.1. Board with two rotary encoders.
 * Home row mods, dedicated shift key on standard keyboard positions. Thumb keys with layers hold-tap for space and backspace.
 * Right-shifted wasd gaming layer with an additional raised gaming layer
 * Keymap by Sjur Barndon. 
 * 
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>


#define BASE 0
#define SYM 1
#define NAV 2
#define NUM 3
#define MAC 4
#define GAM 5
#define GAR 6 
#define GAT 7
#define BLU 8

// Mouse and rotary redefinition:
#define ZMK_POINTING_DEFAULT_MOVE_VAL 5000   // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 140    // default: 10

    &mmv {
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        time-to-max-speed-ms = <90>;
        acceleration-exponent = <1>;
    };
    &sensors {
        triggers-per-rotation = <72>;
    };


#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/mouse.h>

/ {
    behaviors {
        dbbs: double_tap_backspace {               // This should backspace when pressed once, and ctrl backspace (backspace word) when double tapped 
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp BSPC>, <&kp LC(BSPC)>;
        };

        dbbsdel: double_back_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&dbbs>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // Macros (bluetooth)
        bt0: btmacro0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &bt BT_SEL 0>,<&macro_press &to 0>;
        };        
        bt1: btmacro1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &bt BT_SEL 1>,<&macro_press &to 0>;
        };        
        bt2: btmacro2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &bt BT_SEL 2>,<&macro_press &to 0>;
        };
        bt3: btmacro3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &bt BT_SEL 3>,<&macro_press &to 0>;
        };

        // Sensor rotation:
        a_scroll_y: sensor_arrow_scroll_y {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp LEFT_ARROW>, <&kp RIGHT_ARROW>;
            tap-ms = <20>;  
        };
        a_scroll_x: sensor_arrow_scroll_x {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp UP_ARROW>, <&kp DOWN_ARROW>;
            tap-ms = <20>;              
        };
        mouse_move_x: mouse_move_x {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&mmv MOVE_UP>, <&mmv MOVE_DOWN>;
            tap-ms = <20>;  
        };
        mouse_move_y: mouse_move_y {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&mmv MOVE_LEFT>, <&mmv MOVE_RIGHT>;
            tap-ms = <20>;  
        };
        mouse_scroll_x: mouse_scroll_x {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;
            tap-ms = <20>;  
        };
        mouse_scroll_y: mouse_scroll_y {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_LEFT>, <&msc SCRL_RIGHT>;
            tap-ms = <20>; 
        };

        //ctrl z and ctrl y on rotation
        history_scroll: history_scroll {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp LC(Z)>, <&kp LC(Y)>;
            tap-ms = <20>; 
        };

        //mod morph for norwegian layout
        dotcolon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        commasemi: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMICOLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        starapo: star_apostrophe {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp STAR>, <&kp APOSTROPHE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        minuscore: minus_underscore {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp UNDERSCORE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };


        // lmt: left_hand_mod_tap {
        //     compatible = "zmk,behavior-hold-tap";
        //     flavor = "hold-preferred";
        //     tapping-term-ms = <280>;
        //     quick-tap-ms = <175>;
        //     require-prior-idle-ms = <150>;
        //     #binding-cells = <2>;
        //     bindings = <&kp>, <&kp>;
        //     //hold-trigger-key-positions = <KEYS_L THUMBS>;
        //     hold-trigger-on-release;
        // };
        // rmt: right_hand_mod_tap {
        //     compatible = "zmk,behavior-hold-tap";
        //     flavor = "hold-preferred";
        //     tapping-term-ms = <280>;
        //     quick-tap-ms = <175>;
        //     require-prior-idle-ms = <150>;
        //     #binding-cells = <2>;
        //     bindings = <&kp>, <&kp>;
        //     //hold-trigger-key-positions = <KEYS_R THUMBS>;
        //     hold-trigger-on-release;
        // };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        
    };

    combos {
        compatible = "zmk,combos";
        combo_quote {
            timeout-ms = <50>;
            layers = <0 1>;
            key-positions = <27 28>;          //df
            bindings = <&kp DOUBLE_QUOTES>;
        };
        combo_apostrophe {
            timeout-ms = <50>;
            layers = <0 1>;
            key-positions = <31 32>;          //jk
            bindings = <&kp APOSTROPHE>;
        };
        combo_parantesis_open {
            timeout-ms = <50>;
            layers = <0 1>;
            key-positions = <26 28>;
            bindings = <&kp LPAR>;
        };
        combo_parantesis_close {
            timeout-ms = <50>;
            layers = <0 1>;
            key-positions = <31 33>;
            bindings = <&kp RPAR>;
        };
        combo_forward_slash {
            timeout-ms = <50>;
            layers = <0 1>;
            key-positions = <25 28>; // af
            bindings = <&kp FSLH>;
        };
        combo_backwards_slash {
            timeout-ms = <50>;
            layers = <0 1>;
            key-positions = <31 34>; // j:
            bindings = <&kp BSLH>;
        };
        combo_curlybracket_open {
            timeout-ms = <50>;
            layers = <0 1>;
            key-positions = <38 40>; // xv
            bindings = <&kp LEFT_BRACE>;
        };
        combo_curlybracket_close {
            timeout-ms = <50>;
            layers = <0 1>;
            key-positions = <45 47>; // m.
            bindings = <&kp RIGHT_BRACE>;
        };
        combo_bracket_open {
            timeout-ms = <50>;
            layers = <0 1>;
            key-positions = <14 16>; // wr
            bindings = <&kp LEFT_BRACKET>;
        };
        combo_bracket_close {
            timeout-ms = <50>;
            layers = <0 1>;
            key-positions = <19 21>; // uo
            bindings = <&kp RIGHT_BRACKET>;
        };
        combo_return_to_base_layer { // Global scope combo on the left half to return to base layer
            timeout-ms = <50>;
            key-positions = <0 41>; //ESC + B
            bindings = <&to BASE>;
        };

    };
    
    
    keymap {
        compatible = "zmk,keymap";

        base_layer { //Layer 0  - BASE 
            bindings = <

&kp ESC     &kp N1  &kp N2      &kp N3      &kp N4      &kp N5                                       &kp N6        &kp N7      &kp N8      &kp N9        &kp N0      &kp DEL
&kp TAB     &kp Q   &kp W       &kp E       &kp R       &kp T                                        &kp Y         &kp U       &kp I       &kp O         &kp P       &kp GRAVE
&sk LSHFT   &kp A   &hm LGUI S  &hm LALT D  &hm LCTRL F &kp G                                        &kp H         &hm LCTRL J &hm LALT K  &hm LGUI L    &kp COLON   &sk RSHFT
&caps_word  &kp Z   &kp X       &kp C       &kp V       &kp B          &kp C_MUTE     &kp K_PP       &kp N         &kp M       &commasemi  &dotcolon     &minuscore  &caps_word
                    &mo BLU     &mo MAC     &mo NUM     &lt SYM SPACE  &lt NAV ENTER  &lt NAV ENTER  &lt SYM BSPC  &mo NUM     &mo MAC     &mo BLU
            >;                                                                                   
            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &mouse_scroll_x>;
        };                  

        symbols_layer { //Layer 1 - SYM
            bindings = <

&to BASE   &kp F1    &kp F2         &kp F3          &kp F4          &kp F5                          &kp F6      &kp F7          &kp F8          &kp F9          &kp F10    &kp F11  
&none      &kp HASH  &kp DQT        &kp LT          &kp GT          &kp PRCNT                       &kp CARET   &kp LBKT        &kp RBKT        &kp SQT         &kp AMPS   &none
&none      &none     &hm LGUI EXCL  &hm LALT FSLH   &hm LCTRL BSLH  &kp EQUAL                       &kp PIPE    &hm LCTRL LPAR  &hm LALT RPAR   &hm LGUI QMARK  &kp COLON  &none 
&none      &none     &kp DOLLAR     &kp MINUS       &kp PLUS        &kp STAR   &none      &none     &kp TILDE   &kp LBRC        &kp RBRC        &kp AT          &kp SEMI   &kp F12
                     &trans         &trans          &trans          &kp SPACE  &to 0      &kp RET   &kp BSPC    &trans          &trans          &trans
            >;
            sensor-bindings = <&history_scroll &history_scroll>; 
        };      

        navigation_layer { //Layer 2 - NAV
            bindings = <

&to BASE   &none    &none            &kp LA(UP)   &none             &none                         &kp PSCRN  &none     &kp LC(LA(UP))    &none       &kp INS &kp DEL
&none      &none    &kp LS(LG(LEFT)) &kp LG(UP)   &kp LS(LG(RIGHT)) &none                         &kp PG_UP  &kp HOME  &kp UP            &kp END     &none   &none
&kp LSHFT  &none    &kp LG(LEFT)     &kp LG(DOWN) &kp LG(RIGHT)     &none                         &kp PG_DN  &kp LEFT  &kp DOWN          &kp RIGHT   &none   &none
&kp LCTRL  &none    &kp LA(LEFT)     &kp LA(DOWN) &kp LA(RIGHT)     &none   &mkp RCLK  &mkp LCLK  &none      &none     &kp LC(LA(DOWN))  &none       &none   &none
                    &trans           &trans       &trans            &trans  &to 0      &kp RET    &trans     &trans    &trans            &none
             >;
            sensor-bindings = <&mouse_move_x &mouse_move_y>;  //TODO: add mod morph for shift swap xy
        };

        numpad_layer { //Layer 3 - NUM
            bindings = <

&to BASE    &none  &none            &mkp MCLK       &none           &none                        &kp KP_NLCK &kp DEL    &kp FSLH   &kp STAR    &kp MINUS   &none
&none       &none  &mkp LCLK        &mmv MOVE_UP    &mkp RCLK       &none                        &kp PG_UP   &kp KP_N7  &kp KP_N8  &kp KP_N9   &kp PLUS    &none
&none       &none  &mmv MOVE_LEFT   &mmv MOVE_DOWN  &mmv MOVE_RIGHT &none                        &kp PG_DN   &kp KP_N4  &kp KP_N5  &kp KP_N6   &kp RET     &none
&none       &none  &none            &none           &none           &none    &none   &none       &none       &kp KP_N1  &kp KP_N2  &kp KP_N3   &none       &none
                   &trans           &trans          &trans          &to 0    &trans  &trans      &trans      &kp KP_N0  &kp KP_DOT &none
            >;
            sensor-bindings = <&inc_dec_kp C_BRI_UP C_BRI_DN &mouse_scroll_x>; 
        };

        macro_layer { //Layer 4 - MAC                     
            bindings = <

&to BASE &none  &none  &none  &kp LA(F4)  &none                     &none  &none        &none    &none   &none   &sys_reset
&to GAM  &kp N1 &kp N2 &kp N3 &kp N4      &kp N5                    &kp N6 &kp N7       &kp N8   &kp N9  &kp N0  &soft_off
&none    &none  &none  &none  &none       &none                     &none  &kp LA(F10)  &none    &none   &none   &none
&none    &none  &none  &none  &none       &none    &none   &none    &none  &none        &none    &none   &none   &none
                &none  &none  &none       &none    &none   &none    &none  &none        &to 3    &none
            >;
             sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &mouse_scroll_x>;
        };

        gaming_layer_base { //Layer 5 - GAM         //TODO: fine tune - some clever macros for left TGB and bottom 678
            bindings = <

&kp ESC     &kp N1      &kp N2  &kp N3   &kp N4     &kp N5                              &kp N6    &kp N7  &kp N8     &kp N9    &kp N0     &to BASE
&kp TAB     &kp T       &kp Q   &kp W    &kp E      &kp R                               &kp Y     &kp U   &kp I      &kp O     &kp P      &kp GRAVE
&kp LSHIFT  &lt GAR G   &kp A   &kp S    &kp D      &kp F                               &kp H     &kp J   &kp K      &kp L     &kp STAR   &kp RSHFT
&kp LCTRL   &kp B       &kp Z   &kp X    &kp C      &kp V        &kp C_MUTE    &none    &kp N     &kp M   &kp COMMA  &kp DOT   &kp MINUS  &kp LCTRL
                        &kp N6  &kp N7   &kp LALT   &kp SPACE    &lt GAR RET   &tog GAT &kp BSPC  &none   &none      &none
            >;   
             sensor-bindings = <&mouse_scroll_x &mouse_scroll_x>;
        };

        gaming_layer_raise { //Layer 6 - GAR 
            bindings = <

&kp ESC     &kp F1   &kp F2    &kp F3   &kp F4    &kp F5                             &kp N6    &kp N7  &kp N8     &kp N9    &kp N0     &to BASE
&kp TAB     &kp O    &kp Y     &kp W    &kp U     &kp I                              &kp Y     &kp U   &kp I      &kp O     &kp P      &kp GRAVE
&kp LSHIFT  &to GAM  &kp A     &kp S    &kp D     &kp P                              &kp H     &kp J   &kp K      &kp L     &kp STAR   &kp RSHFT
&kp LCTRL   &kp N0   &kp K     &kp L    &kp N     &kp M      &kp C_MUTE    &none     &kp N     &kp M   &kp COMMA  &kp DOT   &kp MINUS  &kp LCTRL
                     &kp N6    &kp N7   &kp LALT  &kp SPACE  &kp RET       &tog GAT  &none     &none   &none   &none
            >;   
             sensor-bindings = <&mouse_scroll_x &mouse_scroll_x>;
        };
         
        gaming_layer_type { //Layer 7  - GAT 
            bindings = <

&kp ESC     &kp N1  &kp N2      &kp N3      &kp N4      &kp N5                                  &kp N6        &kp N7      &kp N8      &kp N9        &kp N0      &kp DEL
&kp TAB     &kp Q   &kp W       &kp E       &kp R       &kp T                                   &kp Y         &kp U       &kp I       &kp O         &kp P       &kp GRAVE
&sk LSHFT   &kp A   &kp S       &kp D       &kp F       &kp G                                   &kp H         &kp J       &kp K       &kp L         &kp COLON   &sk RSHFT
&caps_word  &kp Z   &kp X       &kp C       &kp V       &kp B          &kp C_MUTE     &kp K_PP  &kp N         &kp M       &commasemi  &dotcolon     &minuscore  &caps_word
                    &none       &none       &none       &lt SYM SPACE  &lt NAV ENTER  &to GAM   &lt SYM BSPC  &none       &none       &none
            >;                                                                                   
            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &mouse_scroll_x>;
        };          

        bluetooth_layer { //Layer 8 - BLU
            bindings = <

&to BASE    &none  &none   &none     &none         &bt BT_CLR_ALL                   &none &none   &none    &none   &none   &none  
&none       &none  &none   &none     &bt BT_CLR    &none                            &none &none   &none    &none   &none   &none  
&bt BT_PRV  &bt3   &bt2    &bt1      &bt0          &bt BT_NXT                       &none &none   &none    &none   &none   &none  
&none       &none  &none   &none     &none         &none         &none   &none      &none &none   &none    &none   &none   &none  
                   &to 0   &to 0     &to 0         &to 0         &none   &none      &none &none   &none    &none
            >;
            sensor-bindings = <&mouse_scroll_x &mouse_scroll_x>;

        };
    };

};
