/*
 * Copyright (c) 2023 The ZMK Contributors
 * SPDX-License-Identifier: MIT
 *
 * Aurora Sofle V2 Rev 1.1. Board with two rotary encoders.
 * Keymap by Sjur Barndon. 
 * 
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

#define KEYS_L 0 1 2 3 4  5  12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 48 49 50 51 52    // Left-hand keys.
#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 42 43 44 45 46 47 53 54 55 56 57     // Right-hand keys.
#define THUMBS 48 49 50 52 53 54 55 56 57     // Thumb keys.


// Mouse and rotary redefinition:
#define ZMK_POINTING_DEFAULT_MOVE_VAL 5000   // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 140    // default: 10

    &mmv {
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        time-to-max-speed-ms = <90>;
        acceleration-exponent = <1>;
    };
    &sensors {
        triggers-per-rotation = <72>;
    };


#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        dbbs: double_tap_backspace {               // This should backspace when pressed once, and ctrl backspace (backspace word) when double tapped 
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp BSPC>, <&kp LC(BSPC)>;
        };

        dbbsdel: double_back_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&dbbs>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // hold_tm: hold_tap_mod {
        //     compatible = "zmk,behavior-hold-tap";
        //     #binding-cells = <2>;
        //     bindings = <&mo>, <&dbbsdel>;
        //     tapping-term-ms = <200>;
        // };

        // Macros (bluetooth)
        bt0: btmacro0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &bt BT_SEL 0>,<&macro_press &to 0>;
        };        
        bt1: btmacro1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &bt BT_SEL 1>,<&macro_press &to 0>;
        };        
        bt2: btmacro2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &bt BT_SEL 2>,<&macro_press &to 0>;
        };
        bt3: btmacro3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &bt BT_SEL 3>,<&macro_press &to 0>;
        };

        // Sensor rotation:
        a_scroll_y: sensor_arrow_scroll_y {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp LEFT_ARROW>, <&kp RIGHT_ARROW>;
            tap-ms = <20>;  
        };
        a_scroll_x: sensor_arrow_scroll_x {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp UP_ARROW>, <&kp DOWN_ARROW>;
            tap-ms = <20>;              
        };
        mouse_move_x: mouse_move_x {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&mmv MOVE_UP>, <&mmv MOVE_DOWN>;
            tap-ms = <20>;  
        };
        mouse_move_y: mouse_move_y {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&mmv MOVE_LEFT>, <&mmv MOVE_RIGHT>;
            tap-ms = <20>;  
        };
        mouse_scroll_x: mouse_scroll_x {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;
            tap-ms = <20>;  
        };
        mouse_scroll_y: mouse_scroll_y {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_LEFT>, <&msc SCRL_RIGHT>;
            tap-ms = <20>; 
        };

        //ctrl z and ctrl y on rotation
        history_scroll: history_scroll {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp LC(Z)>, <&kp LC(Y)>;
            tap-ms = <20>; 
        };

        //Macros for norwegian letters å,ø,æ also upper case 
        aa_l: aa_lower {                                                   
            compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>;
            bindings =
                <&macro_press &kp RGUI>,
                <&macro_tap &kp O &kp A>,          
                <&macro_release &kp RGUI>;
        };   
        aa_u: aa_upper {                                                    
            compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>;
            bindings =
                <&macro_press &kp RGUI>,
                <&macro_press &kp LSHFT>,
                <&macro_tap &kp O>,
                <&macro_release &kp LSHFT>,
                <&macro_release &kp RGUI>,
                <&macro_tap &kp A>;
        };   
        aa_nor: norwegian_aa {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&aa_l>, <&aa_u>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // øØ
        oo_l: oo_lower {               
            compatible = "zmk,behavior-macro"; //
            #binding-cells = <0>;
            bindings =
                <&macro_press &kp RGUI>,
                <&macro_tap &kp O>,          
                <&macro_release &kp RGUI>,
                <&macro_tap &kp SLASH>;
        };   
        oo_u: oo_upper {               
            compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>;
            bindings =
                <&macro_press &kp RGUI>,         
                <&macro_press &kp LSHFT>,
                <&macro_tap &kp O>,
                <&macro_release &kp LSHFT>,
                <&macro_release &kp RGUI>,
                <&macro_tap &kp SLASH>;
        };   
        oo_nor: norwegian_oo {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&oo_l>, <&oo_u>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // ae
        ae_l: ae_lower {               
            compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>;
            bindings =
                <&macro_press &kp RGUI>,
                <&macro_tap &kp A &kp E>,          //ÆææÆ
                <&macro_release &kp RGUI>;
        };   
        ae_u: ae_upper {               
            compatible = "zmk,behavior-macro"; 
            #binding-cells = <0>;
            bindings =
                <&macro_press &kp RGUI>,
                <&macro_press &kp LSHFT>,
                <&macro_tap &kp A>,           
                <&macro_tap &kp E>,
                <&macro_release &kp LSHFT>,
                <&macro_release &kp RGUI>;
        };   
        ae_nor: norwegian_ae {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&ae_l>, <&ae_u>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        

        //mod morph for norwegian layout
        dotcolon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        commasemi: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMICOLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        starapo: star_apostrophe {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp STAR>, <&kp APOSTROPHE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        minuscore: minus_underscore {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp UNDERSCORE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        
        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&tog>;
        };

        lmt: left_hand_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            flavor = "hold-preferred";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            //hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };
        rmt: right_hand_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            flavor = "hold-preferred";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            //hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };
        
    };

    combos {
        compatible = "zmk,combos";
        combo_quote {
            timeout-ms = <50>;
            layers = <0 1>;
            key-positions = <27 28>;          //df
            bindings = <&kp DOUBLE_QUOTES>;
        };
        combo_apostrophe {
            timeout-ms = <50>;
            layers = <0 1>;
            key-positions = <31 32>;          //jk
            bindings = <&kp APOSTROPHE>;
        };
        combo_parantesis_open {
            timeout-ms = <50>;
            layers = <0 1>;
            key-positions = <26 28>;
            bindings = <&kp LPAR>;
        };
        combo_parantesis_close {
            timeout-ms = <50>;
            layers = <0 1>;
            key-positions = <31 33>;
            bindings = <&kp RPAR>;
        };
    };
    
    
    keymap {
        compatible = "zmk,keymap";

        base_layer { //Layer0
            bindings = <

&kp ESC         &kp N1  &kp N2      &kp N3      &kp N4  &kp N5                               &kp N6     &kp N7  &kp N8      &kp N9      &kp N0          &kp DEL
&kp TAB         &kp Q   &kp W       &kp E       &kp R   &kp T                                &kp Y      &kp U   &kp I       &kp O       &kp P           &kp GRAVE
&sk LSHFT       &kp A   &kp S       &kp D       &kp F   &kp G                                &kp H      &kp J   &kp K       &kp L       &kp STAR        &sk RSHFT
&kp LCTRL       &kp Z   &kp X       &kp C       &kp V   &kp B         &kp C_MUTE  &kp K_PP   &kp N      &kp M   &commasemi  &dotcolon   &minuscore      &kp LCTRL
                        &kp LGUI    &kp LALT    &mo 3   &lt 1 SPACE   &mo 2       &lt 2 RET  &lt 1 BSPC &mo 3   &mo 4       &mo 4
            >;                                                                                   
            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &mouse_scroll_x>;
        };                  

        symbols_layer { //Layer1
            bindings = <

&to 0      &kp F1    &kp F2     &kp F3      &kp F4       &kp F5                            &kp F6      &kp F7    &kp F8    &kp F9     &kp F10    &kp F11  
&none      &kp HASH  &kp DQT    &kp LT      &kp GT       &kp PRCNT                         &kp CARET   &kp LBKT  &kp RBKT  &kp SQT    &kp AMPS   &none
&none      &none     &kp EXCL   &kp FSLH    &kp BSLH     &kp EQUAL                         &kp PIPE    &kp LPAR  &kp RPAR  &kp QMARK  &kp COLON  &none 
&none      &none     &kp DOLLAR &kp MINUS   &kp PLUS     &kp STAR   &none      &none       &kp TILDE   &kp LBRC  &kp RBRC  &kp AT     &kp SEMI   &kp F12
                     &trans     &trans      &trans       &kp SPACE  &to 0      &kp RET     &kp BSPC    &trans    &trans    &trans
            >;
            sensor-bindings = <&history_scroll &history_scroll>; 
        };      

        navigation_layer { //Layer2
            bindings = <

&to 0      &none    &none            &kp LA(UP)   &none             &none                         &kp PSCRN  &none     &kp LC(LA(UP))    &none       &kp INS &kp DEL
&none      &none    &kp LS(LG(LEFT)) &kp LG(UP)   &kp LS(LG(RIGHT)) &none                         &kp PG_UP  &kp HOME  &kp UP            &kp END     &none   &none
&kp LSHFT  &none    &kp LG(LEFT)     &kp LG(DOWN) &kp LG(RIGHT)     &none                         &kp PG_DN  &kp LEFT  &kp DOWN          &kp RIGHT   &none   &none
&kp LCTRL  &none    &kp LA(LEFT)     &kp LA(DOWN) &kp LA(RIGHT)     &none   &mkp RCLK  &mkp LCLK  &none      &none     &kp LC(LA(DOWN))  &none       &none   &none
                    &trans           &trans       &trans            &trans  &to 0      &kp RET    &trans     &trans    &trans            &none
             >;
            sensor-bindings = <&mouse_move_x &mouse_move_y>;  //TODO: add mod morph for shift swap xy
        };

        numpad_layer { //Layer3
            bindings = <

&to 0       &none  &none   &none     &none         &bt BT_CLR_ALL             &kp KP_NLCK &kp DEL    &kp FSLH   &kp STAR    &kp MINUS   &none
&none       &none  &none   &none     &bt BT_CLR    &none                      &kp PG_UP   &kp KP_N7  &kp KP_N8  &kp KP_N9   &kp PLUS    &none
&bt BT_PRV  &bt3   &bt2    &bt1      &bt0          &bt BT_NXT                 &kp PG_DN   &kp KP_N4  &kp KP_N5  &kp KP_N6   &kp RET     &none
&none       &none  &none   &none     &none         &none    &none   &none     &none       &kp KP_N1  &kp KP_N2  &kp KP_N3   &none       &none
                   &trans  &trans    &trans        &to 0    &trans  &trans    &trans      &kp KP_N0  &kp KP_DOT &none
            >;
            sensor-bindings = <&inc_dec_kp C_BRI_UP C_BRI_DN &mouse_scroll_x>; 
        };

        macro_layer { //Layer4                              
            bindings = <

&to 0    &none  &none  &none  &kp LA(F4)  &none                     &none  &none        &none    &none   &none   &sys_reset
&to 5    &kp N1 &kp N2 &kp N3 &kp N4      &kp N5                    &kp N6 &kp N7       &kp N8   &kp N9  &kp N0  &soft_off
&none    &none  &none  &none  &none       &none                     &none  &kp LA(F10)  &none    &none   &none   &none
&none    &none  &none  &none  &none       &none    &none   &none    &none  &none        &none    &none   &none   &none
                &none  &none  &none       &none    &none   &none    &none  &none        &to 3    &none
            >;

             sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &mouse_scroll_x>;
        };

        gaming_layer { //Layer5 //TODO: fine tune 
            bindings = <

&kp ESC     &kp N1 &kp N2    &kp N3   &kp N4    &kp N5                               &kp N6     &kp N7  &kp N8     &kp N9    &kp N0     &to 0
&kp TAB     &kp Q  &kp W     &kp E    &kp R     &kp T                                &kp Y      &kp U   &kp I      &kp O     &kp P      &kp GRAVE
&kp LSHFT   &kp A  &kp S     &kp D    &kp F     &kp G                                &kp H      &kp J   &kp K      &kp L     &starapo   &kp RSHFT
&kp LCTRL   &kp Z  &kp X     &kp C    &kp V     &kp B        &kp C_MUTE   &kp K_PP   &kp N      &kp M   &commasemi &dotcolon &minuscore &kp LCTRL
                   &kp N7    &kp N8   &kp N9    &kp SPACE    &kp RET      &kp RET    &kp BSPC   &mo 4   &kp RALT   &kp RGUI
            >;   

             sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp PG_UP PG_DN>;
        };

//         dvorak_layer { //LayerX
//             bindings = <
//
// &trans    &trans &trans &trans  &trans  &trans                       &trans      &trans    &trans    &trans   &trans    &to 0
// &trans    &kp Å  &kp ,  &kp .   &kp P   &kp Y                        &kp F       &kp G     &kp C     &kp R    &kp L     &trans
// &trans    &kp A  &kp O  &kp I   &kp U   &kp I                        &kp D       &kp H     &kp T     &kp N    &kp S     &trans
// &trans    &kp Ø  &kp Æ  &kp Q   &kp J   &kp K     &trans   &trans    &kp X       &kp B     &kp M     &kp W    &kp V     &kp Z
//                  &trans &trans  &trans  &trans    &trans   &trans    &trans      &trans    &trans    &trans
//             >;
//
//              sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp PG_UP PG_DN>;
//         };


//         template_layer { //LayerX
//             bindings = <
//
// &to 0     &trans &trans &trans  &trans  &trans                       &trans      &trans    &trans    &trans   &trans    &trans
// &trans    &trans &trans &trans  &trans  &trans                       &trans      &trans    &trans    &trans   &trans    &trans
// &trans    &trans &trans &trans  &trans  &trans                       &trans      &trans    &trans    &trans   &trans    &trans
// &trans    &trans &trans &trans  &trans  &trans    &trans   &trans    &trans      &trans    &trans    &trans   &trans    &trans
//                  &trans &trans  &trans  &trans    &trans   &trans    &trans      &trans    &trans    &trans
//             >;
//
//              sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp PG_UP PG_DN>;
//         };
    };
};
